[{"/home/amir/Dev/twitchfocusedchat/src/index.js":"1","/home/amir/Dev/twitchfocusedchat/src/App.js":"2","/home/amir/Dev/twitchfocusedchat/src/reportWebVitals.js":"3","/home/amir/Dev/twitchfocusedchat/src/services/ChatService.js":"4","/home/amir/Dev/twitchfocusedchat/src/services/StatService.js":"5","/home/amir/Dev/twitchfocusedchat/src/components/Chat.js":"6","/home/amir/Dev/twitchfocusedchat/src/components/Stats.js":"7","/home/amir/Dev/twitchfocusedchat/src/components/Badge.js":"8"},{"size":500,"mtime":1607993902233,"results":"9","hashOfConfig":"10"},{"size":11189,"mtime":1613876460684,"results":"11","hashOfConfig":"10"},{"size":362,"mtime":1607993902233,"results":"12","hashOfConfig":"10"},{"size":644,"mtime":1607997023809,"results":"13","hashOfConfig":"10"},{"size":1664,"mtime":1607909723226,"results":"14","hashOfConfig":"10"},{"size":2621,"mtime":1613421267142,"results":"15","hashOfConfig":"10"},{"size":1300,"mtime":1607750122676,"results":"16","hashOfConfig":"10"},{"size":432,"mtime":1607814460078,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"f5qnyj",{"filePath":"21","messages":"22","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"20"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"20"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"30"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},"/home/amir/Dev/twitchfocusedchat/src/index.js",[],["40","41"],"/home/amir/Dev/twitchfocusedchat/src/App.js",["42","43","44","45","46","47","48"],"import Chat from './components/Chat'\nimport './App.css';\nimport React, { Component } from 'react'\nimport {\n  Paper,\n  Button,\n  TextField,\n  Container,\n  Link,\n  Switch,\n  IconButton\n} from '@material-ui/core';\nimport ChatService from './services/ChatService'\nimport RandomColor from 'randomcolor'\n// import StatService from './services/StatService'\n// import Stats from './components/Stats'\nimport RefreshRoundedIcon from '@material-ui/icons/RefreshRounded';\n\nexport default class App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      chat: [],\n      hideEmotes: localStorage.getItem('hideEmotes') || false ,\n      hideCommands: localStorage.getItem('hideCommands') || false,\n      hideSymbolOnly: localStorage.getItem('hideCommands') || false,\n      route: '/',\n      channel: '',\n      rate: 0,\n      chatters: [],\n      numOfSubs: 0,\n      numOfMods: 0,\n      chatStarted: false\n    }\n    this.colors = []\n    // Keep history clean\n    setInterval(async () => {if (this.state.chat.length > 1000) {\n      const oldLength = this.state.chat.length\n      const shorterChat = this.state.chat.slice(this.state.chat.length - 1000, this.state.chat.length)\n      const newLength = shorterChat.length\n      this.setState({...this.state, chat: shorterChat})\n      console.log(`Shortened chat from ${oldLength} to ${newLength}`)\n     }else{\n      //  console.log('Chat length good')\n     }\n    }, 5000)\n    //this.startChat()\n    \n  }\n\n  componentDidMount(){\n    if(localStorage.getItem('channel')){\n      this.setState({route:'/dashboard'})\n      this.setState({channel:localStorage.getItem('channel')})\n      this.setState({hideEmotes: localStorage.getItem('hideEmotes')})\n      this.setState({hideCommands: localStorage.getItem('hideCommands')})\n    }\n  }\n  \n  componentDidUpdate(){\n    if(localStorage.getItem('channel') && !this.state.chatStarted){\n      this.startChat()\n      this.setState({chatStarted:true})\n      //this.setState({hideEmotes: localStorage.getItem('hideEmotes')})\n    }\n  }\n  setRate(rate){\n    \n  }\n  // Runs when app is ready to connect to chat\n  startChat() {   \n    this.chatService = new ChatService(this.updateChat.bind(this), this.state)\n    console.log('Connecting to chat')\n    //this.statService = new StatService(this)\n    //this.statService.start()\n  }\n\n  // Runs every time a new message is received. \n  updateChat(target, context, msg, self) {\n    \n    // Emotes\n    if(context['emote-only']){\n      if(this.state.hideEmotes){\n        return\n      }\n      \n    }\n    //Commands\n    if(msg.charAt(0) == '!'){\n      if(this.state.hideCommands){\n        return\n      }\n    }\n    \n    // Symbol only messages\n    var lettersAndNumbers = /[a-zA-Z0-9]+/g\n    if(this.state.hideSymbolOnly){\n      console.log(\"Symbols must be hidden\")\n      if(!lettersAndNumbers.test(msg)){\n        console.log(\"Message doesn't have any letters in it\")\n        return\n      }\n    }\n\n    // if (this.state.chat.length % 100 == 0) console.log('chats: ', this.state.chat.length)\n\n    // if(!context.color){\n    //   console.log('Color is null!')\n    //   if(this.colors.includes(context['display-name'])){\n    //     context.color = this.colors[context['display-name']]\n    //     console.log('User has already been assigned a color: ',  this.colors[context['display-name']])\n    //   }else{\n    //     this.colors.push({[context['display-name']] : RandomColor()})\n    //     context.color = this.colors[context['display-name']]\n    //     console.log('New random color assigned to user, ', this.colors[context['display-name']])\n    //   } \n    // }\n    //this.statService.newChat()\n    //console.log(context)\n\n    // Data Model for messages\n    let chat = {\n      isVip: context.badges.vip == 1,\n      name: context['display-name'],\n      color: context.color,\n      msg: msg,\n      marked: null,\n      isSubscriber: context.subscriber,\n      isMod: context.mod\n    }\n\n    let oldChat = this.state.chat\n\n    \n    // Update chat list\n    try {\n      this.setState({\n        chat: [...oldChat, chat]\n      })\n\n    } catch (e) {\n      console.log(e)\n    }\n\n    // console.log(\"# of chats \", this.state.chat.length)\n  }\n\n  // For filtering messages\n  isVip(msg){\n    if(msg.isVip) console.log('is vip')\n    return msg.isVip\n  }\n\n  isQuestion(msg) {\n    if(msg.msg.includes('?')) console.log('msg is question')\n    return msg.msg.includes('?')\n  }\n  isSubscriber(msg) {\n    return msg.isSubscriber\n  }\n  isMod(msg) {\n    return msg.isMod\n  }\n  render() {\n    switch (this.state.route) {\n      case '/dashboard':\n        return (\n          <div className=\"App\" hideScrollbars=\"false\" style={{flexWrap:'wrap'}}>\n            <Chat innerStyle={{ height: '85%',maxHeight:'85vh', minHeight:'85vh'}} chat={this.state.chat} context={this} counter={Object.keys(this.state.chat).length} title=\"Non-Subs\" filter={(msg) => {return !this.isVip(msg) && !this.isMod(msg) && !this.isQuestion(msg) && !this.isSubscriber(msg)}}/>\n            <Chat innerStyle={{ height: '85%',maxHeight:'85vh',  minHeight:'85vh'}} chat={this.state.chat} context={this} title=\"Subscribers\" filter={(msg) => {return !this.isVip(msg) && !this.isMod(msg) && !this.isQuestion(msg) && this.isSubscriber(msg)}} />\n            <div style={{\n              // margin: 10,\n              display: 'flex',\n              flexDirection: 'column',\n              height: '85%',\n              flex:1,\n            }}>\n\n                <Chat innerStyle={{ flex: 1, margin: 0, minHeight: '40vh ', maxHeight: '40vh ', overflow: 'hidden' ,}} style={{ margin: 10, flex: 1 }} chat={this.state.chat} context={this} title=\"Mods / VIP\" filter={(msg) => {return this.isMod(msg) || this.isVip(msg)}} />\n                <Chat innerStyle={{ flex: 1, margin: 0, minHeight: '100% ', maxHeight: '100%', overflow: 'hidden' }} style={{ marginTop:0, margin: 10, flex: 1, maxHeight: '40%' }} chat={this.state.chat} context={this} title=\"Questions\" filter={(msg) => {return !this.isVip(msg) && !this.isMod(msg) && this.isQuestion(msg) && !this.isSubscriber(msg)}} />\n            </div>\n            {<div style={{ flexDirection:'row',flex: 3, paddingLeft: 20, display: 'flex', justifyContent: 'space-evenly', flexWrap: 'wrap', alignItems: 'center' }}>\n              {/* <Stats unit=\"Chats/Minute\">{this.state.rate}</Stats>\n              <Stats unit=\"Chatters\">{Object.keys(this.state.chatters).length}</Stats> */}\n              <h1 style={{textTransform:'capitalize'}}>{this.state.channel} <IconButton color=\"primary\" onClick={()=>{\n                this.setState({channel:'',route:'/'})\n                localStorage.removeItem('channel')\n                this.chatService.disconnect()\n                delete this.chatService\n                this.setState({\n                  chat: [],\n                  channel: '',\n                  rate: 0,\n                  hideEmotes: false ,\n                  hideCommands: false,\n                  hideSymbolOnly: false,\n                  chatters: [],\n                  numOfSubs: 0,\n                  numOfMods: 0,\n                  chatStarted: false\n                })\n                this.setState({\n                  route: '/'\n                })\n                //window.location.reload();\n              }}><RefreshRoundedIcon/></IconButton></h1>\n              <iframe src={\"https://player.twitch.tv/?channel=\" + this.state.channel+\"&parent=thegiraffebox.com\"} frameborder=\"0\" allowfullscreen=\"true\" scrolling=\"no\" style={{width:\"100%\",height:\"50%\"}}></iframe>\n              <div>\n                <h3 style={{textAlign:'center'}}>Settings</h3>\n                <div>\n                <Switch checked={this.state.hideEmotes} onClick={() => {\n                  this.setState(prevState => ({\n                    hideEmotes: !prevState.hideEmotes\n                  }))\n                  localStorage.setItem('hideEmotes', !this.state.hideEmotes)\n                  console.log(localStorage.getItem('hideEmotes'), !this.state.hideEmotes)\n                }}/> Hide Emote Chats<br />\n\n                <Switch checked={this.state.hideCommands} onClick={() => {\n                  this.setState(prevState => ({\n                    hideCommands: !prevState.hideCommands\n                  }))\n                  localStorage.setItem('hideCommands', !this.state.hideCommands)\n                  console.log(localStorage.getItem('hideCommands'), !this.state.hideCommands)\n                }}/> Hide Commands <br />\n                <Switch checked={this.state.hideSymbolOnly} onClick={() => {\n                  this.setState(prevState => ({\n                    hideSymbolOnly: !prevState.hideSymbolOnly\n                  }))\n                  localStorage.setItem('hideSymbolOnly', !this.state.hideSymbolOnly)\n                  console.log(localStorage.getItem('hideSymbolOnly'), !this.state.hideSymbolOnly)\n                }}/> Hide Symbol Only<br />\n                  </div>\n              </div>\n            </div> }\n\n<Container style={{\n              position:'fixed',\n              bottom:0,\n              left:0,\n              }}>\n            <p style={{color:'#666', }}>© 2020  <Link href=\"http://amirshabani.com\">AmirShabani.com</Link></p>\n            </Container>\n          </div>\n          \n        );\n      case '/':\n        return (\n          <div style={{ height: '100%', width: '100%', display: 'flex', justifyContent: 'center', alignItems: 'center', flexDirection: 'column' }}>\n            {/* <Container style={{\n              color: 'white',\n              display:'flex',\n              justifyContent: 'center',\n              marginBottom:'100px'\n            }}>\n              <h2>T.TV Focus Chat</h2>\n            </Container> */}\n            <Container style={{ textAlign: 'center' }}>\n            <p><h1><img src=\"/5Head.png\" height=\"48px\"/> Chat <span style={{fontSize:16, fontWeight:'normal'}}>(Alpha)</span></h1>\n              </p>\n              <p style={{color:'#aaa'}}>A smarter way of viewing your stream's chat.</p>\n\n              <TextField style={{margin:'25px'}} id=\"standard-basic\" autocomplete=\"username\" label=\"Twitch Username\" inputProps={{\n                autoFocus: true,\n                color: 'secondary'\n              }} onChange={(e) => {\n                localStorage.setItem('channel',e.target.value)\n                this.setState({\n                  channel: e.target.value\n                })\n              }} />\n            </Container>\n            <Container style={{ textAlign: 'center', marginTop: 10 }}>\n              <Button variant=\"outlined\" color=\"secondary\" onClick={() => {\n                // new ChatService(this.updateChat.bind(this), this.state)\n                this.setState({\n                  route: '/dashboard'\n                })\n                this.startChat()\n              }}\n              >\n                Launch Chat\n              </Button>\n              \n            </Container>\n            <Container style={{\n              position:'fixed',\n              bottom:0,\n              left:0,\n              }}>\n            <p style={{color:'#666', }}>© 2020  <Link href=\"http://amirshabani.com\">AmirShabani.com</Link>. By using this app you agree to be GiraffeBox's friend.</p>\n            </Container>\n          </div>\n\n        );\n    }\n\n\n  }\n\n}\n","/home/amir/Dev/twitchfocusedchat/src/reportWebVitals.js",[],"/home/amir/Dev/twitchfocusedchat/src/services/ChatService.js",[],"/home/amir/Dev/twitchfocusedchat/src/services/StatService.js",[],["49","50"],"/home/amir/Dev/twitchfocusedchat/src/components/Chat.js",["51","52","53","54"],"import { Paper } from '@material-ui/core'\nimport React, { Component, createRef } from 'react'\nimport Badge from './Badge'\n\nexport default class Chat extends Component {\n\n    constructor() {\n        super()\n        this.messagesEndRef = createRef()\n        this.chatWindow = createRef()\n        this.scrolled = createRef()\n    }\n\n    componentDidMount() {\n        this.scrollToBottom();\n    }\n\n    componentDidUpdate() {\n        this.scrollToBottom();\n    }\n\n    scrollToBottom() {\n        this.chatWindow.scrollTop = this.chatWindow.scrollHeight;\n    }\n    render() {\n        const chat = {\n            padding: 10,\n            minWidth: 250,\n            // border: \"1px solid #2e2e46\",\n            fontSize: 14,\n            backgroundColor: \"#292839\",\n            // maxWidth: \"250px\",\n            color: \"#ccc\",\n            overflowY: \"scroll\",\n            overflowX: \"hidden\",\n            position: 'relative',\n            fontWeight: 'bold',\n            borderRadius: 10,\n            flex: 1,\n            maxWidth:'100vw',\n            \n        }\n        const wrap = {\n            wordWrap: \"break-word\",\n        }\n        let context = this.props.context\n        return (\n            <div style={{\n                padding: 0,\n                margin: 10,\n                color: 'white',\n                flex:1,\n                ...this.props.style\n            }}>\n                \n                <h2 style={{ padding: 10, paddingTop: 0, paddingBottom: 0 }}>{this.props.title} {/*<Badge>{this.props.counter || 'n/a'}</Badge>*/}{this.props.children}</h2>\n                \n                <Paper elevation={3} style={{...this.props.innerStyle, ...chat}} ref={(scrolled) => { this.chatWindow = scrolled; }} class=\"scrollable\">\n                    {/* <div style={{ position: 'absolute', backgroundColor: '#292839', width: '100%' }}>\n\n                    </div> */}\n                    <div style={{}} ref={this.chatWindow}>\n                        {this.props.chat.map((msg, index) => {\n                            if ((this.props.filter && this.props.filter(msg)) || !this.props.filter) {\n                                return (\n\n                                    <p class=\"chatMessage\" key={index}\n                                        onClick={() => {\n\n                                        }}><span style={{ color: msg.color }}>{msg.name}</span>: {msg.msg}</p>\n                                )\n                            }\n                        })}\n                        <div ref={el => { this.el = el; }} ></div>\n                    </div>\n                </Paper>\n\n            </div>\n        )\n    }\n}\n","/home/amir/Dev/twitchfocusedchat/src/components/Stats.js",["55"],"import React, { Component } from 'react'\nimport {\n    Paper\n} from '@material-ui/core'\n\nexport default class Stats extends Component {\n    render() {\n        const paper = {\n            color: \"white\",\n            padding: 10,\n            minWidth: 300,\n            // border: \"1px solid #2e2e46\",\n            fontSize: 16,\n            backgroundColor: \"#292839\",\n            maxWidth: \"250px\",\n            color: \"#ccc\",\n            overflowY: \"hidden\",\n            overflowX: \"hidden\",\n            position: 'relative',\n            fontWeight: 'bold',\n            borderRadius: 10,\n            flex: 1,\n            textAlign:'center',\n            marginBottom:10,\n            display:'flex',\n            // height:'90%',\n            justifyContent:'center',\n            flexDirection:'column',\n            height:'200px' \n        }\n        return (\n            <div style={{\n                display:'flex',\n                justifyContent:'center',\n                \n            }}>\n            {/* <h2 style={{color:'#ccc'}}>Chats/Minute</h2> */}\n            <Paper elevation={1} style={paper}>\n                <span style={{fontSize:32, padding:10}}>{this.props.children}</span> <span style={{fontWeight:'normal'}}>{this.props.unit}</span>\n            </Paper>\n            </div>\n        )\n    }\n}\n","/home/amir/Dev/twitchfocusedchat/src/components/Badge.js",[],["56","57"],{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","severity":1,"message":"63","line":5,"column":3,"nodeType":"64","messageId":"65","endLine":5,"endColumn":8},{"ruleId":"62","severity":1,"message":"66","line":14,"column":8,"nodeType":"64","messageId":"65","endLine":14,"endColumn":19},{"ruleId":"67","severity":1,"message":"68","line":89,"column":22,"nodeType":"69","messageId":"70","endLine":89,"endColumn":24},{"ruleId":"67","severity":1,"message":"68","line":123,"column":33,"nodeType":"69","messageId":"70","endLine":123,"endColumn":35},{"ruleId":"71","severity":1,"message":"72","line":165,"column":5,"nodeType":"73","messageId":"74","endLine":296,"endColumn":6},{"ruleId":"75","severity":1,"message":"76","line":207,"column":15,"nodeType":"77","endLine":207,"endColumn":205},{"ruleId":"78","severity":1,"message":"79","line":259,"column":20,"nodeType":"77","endLine":259,"endColumn":57},{"ruleId":"58","replacedBy":"80"},{"ruleId":"60","replacedBy":"81"},{"ruleId":"62","severity":1,"message":"82","line":3,"column":8,"nodeType":"64","messageId":"65","endLine":3,"endColumn":13},{"ruleId":"62","severity":1,"message":"83","line":43,"column":15,"nodeType":"64","messageId":"65","endLine":43,"endColumn":19},{"ruleId":"62","severity":1,"message":"84","line":46,"column":13,"nodeType":"64","messageId":"65","endLine":46,"endColumn":20},{"ruleId":"85","severity":1,"message":"86","line":63,"column":59,"nodeType":"87","messageId":"88","endLine":63,"endColumn":61},{"ruleId":"89","severity":1,"message":"90","line":16,"column":13,"nodeType":"91","messageId":"70","endLine":16,"endColumn":18},{"ruleId":"58","replacedBy":"92"},{"ruleId":"60","replacedBy":"93"},"no-native-reassign",["94"],"no-negated-in-lhs",["95"],"no-unused-vars","'Paper' is defined but never used.","Identifier","unusedVar","'RandomColor' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","jsx-a11y/iframe-has-title","<iframe> elements must have a unique title property.","JSXOpeningElement","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.",["94"],["95"],"'Badge' is defined but never used.","'wrap' is assigned a value but never used.","'context' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","no-dupe-keys","Duplicate key 'color'.","ObjectExpression",["94"],["95"],"no-global-assign","no-unsafe-negation"]